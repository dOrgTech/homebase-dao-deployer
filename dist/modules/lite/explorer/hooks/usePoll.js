'use strict';var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P(function(resolve){resolve(value);});}return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator['throw'](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});};var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{'default':mod};};Object.defineProperty(exports,'__esModule',{value:true});exports.useSinglePoll=void 0;const react_1=require('react');const useNotification_1=require('../../../common/hooks/useNotification');const utils_1=require('../../../../services/lite/utils');const ProposalTableRowStatusBadge_1=require('../components/ProposalTableRowStatusBadge');const config_1=require('../../../../services/config');const node_fetch_1=__importDefault(require('node-fetch'));const useSinglePoll=(pollId,id,community)=>{const [poll,setPoll]=(0,react_1.useState)();const openNotification=(0,useNotification_1.useNotification)();(0,react_1.useEffect)(()=>{function fetchPoll(){return __awaiter(this,void 0,void 0,function*(){try{yield(0,node_fetch_1.default)(`${(0,config_1.getEnv)(config_1.EnvKey.REACT_APP_LITE_API_URL)}/polls/${pollId}/polls`).then(response=>__awaiter(this,void 0,void 0,function*(){if(!response.ok){openNotification({message:'An error has occurred',autoHideDuration:2000,variant:'error'});return;}const record=yield response.json();if(!record){return;}record.timeFormatted=(0,utils_1.isProposalActive)(Number(record.endTime));record.isActive=record.timeFormatted&&!record.timeFormatted.includes('ago')?ProposalTableRowStatusBadge_1.ProposalStatus.ACTIVE:ProposalTableRowStatusBadge_1.ProposalStatus.CLOSED;setPoll(record);return;}));}catch(error){setPoll(undefined);openNotification({message:'An error has occurred',autoHideDuration:2000,variant:'error'});return;}});}fetchPoll();return;},[id,community]);return poll;};exports.useSinglePoll=useSinglePoll;