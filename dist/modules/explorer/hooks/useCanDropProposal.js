'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.useCanDropProposal=void 0;const react_1=require('react');const useTezos_1=require('../../../services/beacon/hooks/useTezos');const useDAO_1=require('../../../services/services/dao/hooks/useDAO');const useProposal_1=require('../../../services/services/dao/hooks/useProposal');const types_1=require('../../../services/services/dao/mappers/proposal/types');const useCanDropProposal=(daoId,proposalId)=>{const {account}=(0,useTezos_1.useTezos)();const {data:dao,cycleInfo}=(0,useDAO_1.useDAO)(daoId);const {data:proposal}=(0,useProposal_1.useProposal)(daoId,proposalId);return(0,react_1.useMemo)(()=>{if(!proposal||!dao){return false;}const isProposer=proposal.proposer.toLowerCase()===account.toLowerCase();const hasExpired=cycleInfo&&proposal.getStatus(cycleInfo.currentLevel).status===types_1.ProposalStatus.EXPIRED;const isGuardian=dao.data.guardian.toLowerCase()===account.toLowerCase();const isNotExecutedOrDropped=cycleInfo&&proposal.getStatus(cycleInfo.currentLevel).status===types_1.ProposalStatus.DROPPED||cycleInfo&&proposal.getStatus(cycleInfo.currentLevel).status===types_1.ProposalStatus.EXECUTED;return!isNotExecutedOrDropped&&(isProposer||hasExpired||isGuardian);},[account,cycleInfo,dao,proposal]);};exports.useCanDropProposal=useCanDropProposal;