'use strict';var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P(function(resolve){resolve(value);});}return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator['throw'](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});};var __rest=this&&this.__rest||function(s,e){var t={};for(var p in s)if(Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0)t[p]=s[p];if(s!=null&&typeof Object.getOwnPropertySymbols==='function')for(var i=0,p=Object.getOwnPropertySymbols(s);i<p.length;i++){if(e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i]))t[p[i]]=s[p[i]];}return t;};var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{'default':mod};};Object.defineProperty(exports,'__esModule',{value:true});exports.useDAO=void 0;const bignumber_js_1=__importDefault(require('bignumber.js'));const react_1=require('react');const react_query_1=require('react-query');const TZKTSubscriptions_1=require('../../../bakingBad/context/TZKTSubscriptions');const tokenBalances_1=require('../../../bakingBad/tokenBalances');const useTezos_1=require('../../../beacon/hooks/useTezos');const baseDAO_1=require('../../../contracts/baseDAO');const lambdaDAO_1=require('../../../contracts/baseDAO/lambdaDAO');const utils_1=require('../../../contracts/utils');const services_1=require('../services');const useBlockchainInfo_1=require('../../../contracts/baseDAO/hooks/useBlockchainInfo');const lite_services_1=require('../../lite/lite-services');const useDAO=address=>{const [cycleInfo,setCycleInfo]=(0,react_1.useState)();const {network}=(0,useTezos_1.useTezos)();const {data:blockchainInfo}=(0,useBlockchainInfo_1.useBlockchainInfo)();const {state:{block}}=(0,react_1.useContext)(TZKTSubscriptions_1.TZKTSubscriptionsContext);const _a=(0,react_query_1.useQuery)(['dao',address],()=>__awaiter(void 0,void 0,void 0,function*(){const response=yield(0,services_1.getDAO)(address);const liteDAO=yield(0,lite_services_1.fetchLiteData)(address,network);const dao=response.daos[0];const token=yield(0,tokenBalances_1.getTokenMetadata)(dao.token.contract,dao.token.network,dao.token.token_id.toString());const base=Object.assign(Object.assign({},dao),{token,ledger:dao.ledgers.map(ledger=>{var _a,_b;const current_unstaked=(0,utils_1.parseUnits)(new bignumber_js_1.default(ledger.current_unstaked),dao.token.decimals);const past_unstaked=(0,utils_1.parseUnits)(new bignumber_js_1.default(ledger.past_unstaked),dao.token.decimals);const staked=(0,utils_1.parseUnits)(new bignumber_js_1.default(ledger.staked),dao.token.decimals);const current_stage_num=ledger.current_stage_num;return Object.assign(Object.assign({},ledger),{current_stage_num,current_unstaked,past_unstaked,staked,holder:Object.assign(Object.assign({},ledger.holder),{proposals_voted:((_a=ledger.holder.proposals_aggregate)===null||_a===void 0?void 0:_a.aggregate.count)||0,votes_cast:(0,utils_1.parseUnits)(new bignumber_js_1.default(((_b=ledger.holder.votes_aggregate)===null||_b===void 0?void 0:_b.aggregate.sum.amount)||0),dao.token.decimals)})});}),type:dao.dao_type.name,extra:dao.dao_type.name==='lambda'?Object.assign(Object.assign({},dao.lambda_extras[0]),{frozen_extra_value:(0,utils_1.parseUnits)((0,baseDAO_1.unpackExtraNumValue)(dao.lambda_extras[0].frozen_extra_value),dao.token.decimals),frozen_scale_value:(0,baseDAO_1.unpackExtraNumValue)(dao.lambda_extras[0].frozen_scale_value),slash_division_value:(0,baseDAO_1.unpackExtraNumValue)(dao.lambda_extras[0].slash_division_value),min_xtz_amount:(0,baseDAO_1.unpackExtraNumValue)(dao.lambda_extras[0].min_xtz_amount),max_xtz_amount:(0,baseDAO_1.unpackExtraNumValue)(dao.lambda_extras[0].max_xtz_amount),slash_scale_value:(0,baseDAO_1.unpackExtraNumValue)(dao.lambda_extras[0].slash_scale_value),max_proposal_size:dao.lambda_extras[0].max_proposal_size}):Object.assign(Object.assign({},dao.treasury_extras[0]),{frozen_extra_value:(0,utils_1.parseUnits)((0,baseDAO_1.unpackExtraNumValue)(dao.treasury_extras[0].frozen_extra_value),dao.token.decimals),frozen_scale_value:(0,baseDAO_1.unpackExtraNumValue)(dao.treasury_extras[0].frozen_scale_value),slash_division_value:(0,baseDAO_1.unpackExtraNumValue)(dao.treasury_extras[0].slash_division_value),min_xtz_amount:(0,baseDAO_1.unpackExtraNumValue)(dao.treasury_extras[0].min_xtz_amount),max_xtz_amount:(0,baseDAO_1.unpackExtraNumValue)(dao.treasury_extras[0].max_xtz_amount),slash_scale_value:(0,baseDAO_1.unpackExtraNumValue)(dao.treasury_extras[0].slash_scale_value)}),quorum_threshold:(0,utils_1.parseUnits)(new bignumber_js_1.default(dao.quorum_threshold),dao.token.decimals)});switch(dao.dao_type.name){case'lambda':return new lambdaDAO_1.LambdaDAO(Object.assign(Object.assign({},base),{liteDAO}));default:throw new Error(`DAO with address '${dao.address}' has an unrecognized type '${dao.dao_type.name}'`);}}),{enabled:!!address,refetchInterval:30000}),{data}=_a,rest=__rest(_a,['data']);(0,react_1.useEffect)(()=>{;(()=>__awaiter(void 0,void 0,void 0,function*(){if(data&&blockchainInfo){const blockTimeAverage=blockchainInfo.constants.timeBetweenBlocks;const blocksFromStart=block-data.data.start_level;const periodsFromStart=Math.floor(blocksFromStart/Number(data.data.period));const type=periodsFromStart%2==0?'voting':'proposing';const blocksLeft=Number(data.data.period)-blocksFromStart%Number(data.data.period);setCycleInfo({blocksLeft,type,timeEstimateForNextBlock:blockTimeAverage,currentCycle:periodsFromStart,currentLevel:block});}}))();},[data,blockchainInfo,block,network]);const ledgerWithBalances=(0,react_1.useMemo)(()=>{if(data&&cycleInfo){return data.data.ledger.map(l=>{const available_balance=cycleInfo.currentCycle>Number(l.current_stage_num)?l.current_unstaked.plus(l.past_unstaked):l.past_unstaked;const total_balance=l.current_unstaked.plus(l.past_unstaked);return Object.assign(Object.assign({},l),{available_balance,pending_balance:total_balance.minus(available_balance),total_balance});});}},[data,cycleInfo]);return Object.assign({data,cycleInfo,ledger:ledgerWithBalances},rest);};exports.useDAO=useDAO;