'use strict';var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P(function(resolve){resolve(value);});}return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator['throw'](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});};var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{'default':mod};};Object.defineProperty(exports,'__esModule',{value:true});exports.getProfileClaim=void 0;const __1=require('..');const node_fetch_1=__importDefault(require('node-fetch'));const getProfileClaim=(tzAddress,network)=>__awaiter(void 0,void 0,void 0,function*(){const url=`${__1.API_URL}/${tzAddress}/${network}`;const response=yield(0,node_fetch_1.default)(url);if(!response.ok){throw new Error('Failed to fetch Profile Claim from TZProfile API');}const result=yield response.json();const profileClaim=result.map(claimArray=>JSON.parse(claimArray[1])).find(claim=>claim.type.includes('BasicProfile'));if(!profileClaim){throw new Error(`Address ${tzAddress} has no profile in network ${network}`);}return profileClaim;});exports.getProfileClaim=getProfileClaim;