'use strict';var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P(function(resolve){resolve(value);});}return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator['throw'](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});};var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{'default':mod};};Object.defineProperty(exports,'__esModule',{value:true});exports.useOriginate=void 0;const react_1=require('react');const react_query_1=require('react-query');const deploy_1=require('../../metadataCarrier/deploy');const useTezos_1=require('../../../beacon/hooks/useTezos');const __1=require('..');const services_1=require('../../../services/dao/services');const mixpanel_browser_1=__importDefault(require('mixpanel-browser'));const signer_1=require('@taquito/signer');const beacon_1=require('../../../beacon');const utils_1=require('../../../lite/utils');const lite_services_1=require('../../../services/lite/lite-services');const INITIAL_STATES=[{activeText:'',completedText:''},{activeText:'',completedText:''},{activeText:'',completedText:''},{activeText:'',completedText:''}];const waitForIndexation=contractAddress=>__awaiter(void 0,void 0,void 0,function*(){return new Promise((resolve,reject)=>__awaiter(void 0,void 0,void 0,function*(){let tries=0;const tryDAOIndexation=()=>__awaiter(void 0,void 0,void 0,function*(){const response=yield(0,services_1.getDAO)(contractAddress);if(response.daos.length>0){resolve(true);}else{if(tries>12){console.log(`DAO indexation timed out`);reject(false);}console.log(`Verifying DAO indexation, trial #${tries+1}`);tries++;setTimeout(()=>__awaiter(void 0,void 0,void 0,function*(){return yield tryDAOIndexation();}),10000);}});yield tryDAOIndexation();}));});const useOriginate=template=>{const queryClient=(0,react_query_1.useQueryClient)();const [states,setStates]=(0,react_1.useState)(INITIAL_STATES);const [activeState,setActiveState]=(0,react_1.useState)();const {tezos,connect,network,account,wallet}=(0,useTezos_1.useTezos)();const result=(0,react_query_1.useMutation)(({metadataParams,params})=>__awaiter(void 0,void 0,void 0,function*(){var _a;const updatedStates=INITIAL_STATES;updatedStates[0]={activeText:'Deploying Metadata Carrier Contract',completedText:''};setActiveState(0);setStates(updatedStates);let newTezos=tezos;if(network!=='mainnet'){newTezos=(0,useTezos_1.initTezosInstance)(network);const signer=yield signer_1.InMemorySigner.fromSecretKey(beacon_1.ALICE_PRIV_KEY);newTezos.setProvider({signer});params.orgSettings.administrator=yield newTezos.wallet.pkh();}mixpanel_browser_1.default.track('Started DAO origination',{contract:'MetadataCarrier',daoName:params.orgSettings.name,daoType:params.template});const metadata=yield(0,deploy_1.deployMetadataCarrier)(Object.assign(Object.assign({},metadataParams),{tezos:newTezos,connect}));if(!metadata){throw new Error(`Could not deploy ${template}DAO because MetadataCarrier contract deployment failed`);}updatedStates[0]=Object.assign(Object.assign({},updatedStates[0]),{completedText:`Deployed Metadata Carrier with address "${metadata.deployAddress}" and key "${metadata.keyName}"`});updatedStates[1]={activeText:`Deploying ${template} DAO Contract`,completedText:''};setActiveState(1);setStates(updatedStates);mixpanel_browser_1.default.track('Started DAO origination',{contract:'BaseDAO',daoName:params.orgSettings.name});const contract=yield __1.BaseDAO.baseDeploy(template,{tezos:newTezos,metadata,params,network});if(!contract){throw new Error(`Error deploying ${template}DAO`);}updatedStates[1]=Object.assign(Object.assign({},updatedStates[1]),{completedText:`Deployed ${template} DAO contract with address "${contract.address}"`});updatedStates[2]={activeText:`Waiting for DAO ownership to be transferred`,completedText:''};setActiveState(2);setStates(updatedStates);const tx=yield __1.BaseDAO.transfer_ownership(contract.address,contract.address,newTezos);if(!tx){throw new Error(`Error transferring ownership of ${template}DAO to itself`);}updatedStates[2]=Object.assign(Object.assign({},updatedStates[2]),{completedText:`Ownership of ${template} DAO transferred to the DAO "${contract.address}"`});updatedStates[3]={activeText:`Waiting for DAO to be indexed`,completedText:''};setActiveState(3);setStates(updatedStates);mixpanel_browser_1.default.track('Completed DAO creation',{daoName:params.orgSettings.name,daoType:params.template});mixpanel_browser_1.default.track('Waiting for DAO indexation',{daoName:params.orgSettings.name,daoType:params.template});const indexed=yield waitForIndexation(contract.address);updatedStates[3]=Object.assign(Object.assign({},updatedStates[3]),{completedText:indexed?`Deployed ${metadataParams.metadata.unfrozenToken.name} successfully`:`Deployed ${metadataParams.metadata.unfrozenToken.name} successfully, but metadata has not been indexed yet. This usually takes a few minutes, your DAO page may not be available yet.`});setActiveState(4);setStates(updatedStates);if(wallet){const values={name:params.orgSettings.name,description:params.orgSettings.description,linkToTerms:contract.address,picUri:'',members:[],polls:[],tokenAddress:params.orgSettings.governanceToken.address,tokenType:'FA2',requiredTokenOwnership:true,allowPublicAccess:true,network:network,daoContract:contract.address,tokenID:params.orgSettings.governanceToken.tokenId};const {signature,payloadBytes}=yield(0,utils_1.getSignature)(account,wallet,JSON.stringify(values));const publicKey=(_a=yield wallet===null||wallet===void 0?void 0:wallet.client.getActiveAccount())===null||_a===void 0?void 0:_a.publicKey;const resp=yield(0,lite_services_1.saveLiteCommunity)(signature,publicKey,payloadBytes);}mixpanel_browser_1.default.track('Completed DAO indexation',{daoName:params.orgSettings.name,daoType:params.template});return contract;}),{onSuccess:()=>{queryClient.resetQueries();}});return{mutation:result,states,activeState};};exports.useOriginate=useOriginate;