'use strict';var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P(function(resolve){resolve(value);});}return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator['throw'](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});};var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{'default':mod};};Object.defineProperty(exports,'__esModule',{value:true});exports.useUnstakeVotes=void 0;const mixpanel_browser_1=__importDefault(require('mixpanel-browser'));const useNotification_1=require('../../../../modules/common/hooks/useNotification');const react_query_1=require('react-query');const useTezos_1=require('../../../beacon/hooks/useTezos');const bakingBad_1=require('../../../bakingBad');const useUnstakeVotes=()=>{const queryClient=(0,react_query_1.useQueryClient)();const openNotification=(0,useNotification_1.useNotification)();const {network,tezos,account,connect}=(0,useTezos_1.useTezos)();return(0,react_query_1.useMutation)(params=>__awaiter(void 0,void 0,void 0,function*(){const {key:freezeNotification,closeSnackbar:closeFreezeNotification}=openNotification({message:`Unstake is being processed...`,persist:true,variant:'info'});try{let tezosToolkit=tezos;if(!account){tezosToolkit=yield connect();}const data=yield params.dao.unstakeVotes(params.proposalId,tezosToolkit);mixpanel_browser_1.default.track(`Votes Unstaked`,{dao:params.dao.data.address,proposalId:params.proposalId});yield data.confirmation(1);closeFreezeNotification(freezeNotification);openNotification({message:`Unstake transaction confirmed!`,autoHideDuration:10000,variant:'success',detailsLink:`https://${bakingBad_1.networkNameMap[network]}.tzkt.io/`+data.opHash});return data;}catch(e){console.log(e);closeFreezeNotification(freezeNotification);openNotification({message:`An error has happened with unstake transaction!`,variant:'error',autoHideDuration:10000});return new Error(e.message);}}),{onSuccess:()=>{queryClient.resetQueries();}});};exports.useUnstakeVotes=useUnstakeVotes;