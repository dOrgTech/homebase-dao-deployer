'use strict';var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P(function(resolve){resolve(value);});}return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator['throw'](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});};Object.defineProperty(exports,'__esModule',{value:true});exports.useSendXTZ=void 0;const useNotification_1=require('../../../../modules/common/hooks/useNotification');const react_query_1=require('react-query');const useTezos_1=require('../../../beacon/hooks/useTezos');const bakingBad_1=require('../../../bakingBad');const useSendXTZ=()=>{const queryClient=(0,react_query_1.useQueryClient)();const openNotification=(0,useNotification_1.useNotification)();const {network,tezos,account,connect}=(0,useTezos_1.useTezos)();return(0,react_query_1.useMutation)(params=>__awaiter(void 0,void 0,void 0,function*(){const {key:notification,closeSnackbar:closeNotification}=openNotification({message:'XTZ transfer is being processed...',persist:true,variant:'info'});try{let tezosToolkit=tezos;if(!account){tezosToolkit=yield connect();}const data=yield params.dao.sendXtz(params.amount,tezosToolkit);yield data.confirmation(1);closeNotification(notification);openNotification({message:'XTZ transfer confirmed!',autoHideDuration:10000,variant:'success',detailsLink:`https://${bakingBad_1.networkNameMap[network]}.tzkt.io/`+data.opHash});return data;}catch(e){console.log(e);closeNotification(notification);openNotification({message:'An error has happened with XTZ transfer!',variant:'error',autoHideDuration:10000});return new Error(e.message);}}),{onSuccess:()=>{queryClient.resetQueries();}});};exports.useSendXTZ=useSendXTZ;